# Generated by Django 3.2.12 on 2024-03-20 06:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Public identifier')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('otp', models.CharField(default=0, max_length=6)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('store admin', 'Store Admin'), ('delivery', 'Delivery'), ('customer', 'Customer'), ('employe', 'Employee')], default='customer', max_length=100)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('image', models.ImageField(upload_to='uploads/')),
                ('link', models.CharField(max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CancelOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.PositiveSmallIntegerField()),
                ('is_cancelled', models.BooleanField(default=True)),
                ('reason', models.CharField(choices=[('Reason1', 'The price of the product has fallen due to sales/discounts.'), ('Reason2', 'Cheaper alternative available for lesser price.'), ('Reason3', 'Order delivered time is too much'), ('Reason4', 'others')], max_length=100)),
                ('others', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.FloatField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('description', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.CharField(max_length=20, null=True, unique=True)),
                ('total_price', models.FloatField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('order placed', 'Order placed'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('canceled', 'Canceled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(default=' ')),
                ('price', models.FloatField()),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('amount', 'Amount')], default='amount', max_length=200)),
                ('discount', models.FloatField(default=0)),
                ('you_save', models.FloatField(default=0)),
                ('final_price', models.FloatField(default=0)),
                ('is_available', models.BooleanField(default=True)),
                ('image', models.ImageField(blank=True, upload_to='product_images/')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='product_images/')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='product_images/')),
                ('image4', models.ImageField(blank=True, null=True, upload_to='product_images/')),
                ('image5', models.ImageField(blank=True, null=True, upload_to='product_images/')),
                ('image6', models.ImageField(blank=True, null=True, upload_to='product_images/')),
                ('video', models.FileField(blank=True, null=True, upload_to='product_video/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stock', models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Razorpay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency_code', models.CharField(default='INR', max_length=100)),
                ('RAZORPAY_KEY', models.CharField(max_length=1000)),
                ('RAZORPAY_SECRET', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(null=True)),
                ('vat', models.CharField(max_length=255)),
                ('gstin', models.CharField(max_length=255)),
                ('contact_no', models.BigIntegerField(unique=True, validators=[django.core.validators.MaxValueValidator(9999999999), django.core.validators.MinValueValidator(1000000000)])),
                ('email', models.EmailField(max_length=250)),
                ('address', models.TextField(max_length=500)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('ZIP', models.CharField(max_length=100)),
                ('country_name', models.CharField(max_length=100)),
                ('allow_distance', models.IntegerField()),
                ('default_city', models.CharField(max_length=100)),
                ('default_ZIP', models.CharField(max_length=100)),
                ('delivery_charge', models.FloatField()),
                ('tax_charge', models.FloatField()),
                ('delivery_type', models.CharField(choices=[('fixed', 'Fixed'), ('km', 'KM')], max_length=100)),
                ('have_shop', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=100)),
                ('search_result_kind', models.CharField(choices=[('km', 'KM'), ('miles', 'Miles')], max_length=100)),
                ('search_radius', models.IntegerField()),
                ('currency_symbol', models.CharField(max_length=100)),
                ('currency_side', models.CharField(choices=[('left', 'Left'), ('right', 'Right')], max_length=100)),
                ('currency_code', models.CharField(max_length=100)),
                ('app_direction', models.CharField(choices=[('ltr', 'LTR'), ('rtl', 'RTL')], max_length=100)),
                ('SMS_gateway', models.CharField(choices=[('twilio', 'Twilio'), ('msg91', 'MSG91'), ('firebase', 'Firebase')], max_length=100)),
                ('user_login', models.CharField(choices=[('email & password', 'Email & Password'), ('phone & password', 'Phone & Password'), ('phone & OTP', 'Phone & OTP')], max_length=100)),
                ('user_verify_with', models.CharField(choices=[('email verification', 'Email verification'), ('phone verification', 'Phone verification')], max_length=100)),
                ('app_color', models.CharField(max_length=100)),
                ('app_status', models.CharField(choices=[('email verification', 'Email verification'), ('phone verification', 'Phone verification')], max_length=100)),
                ('default_country_code_without_plus', models.IntegerField()),
                ('countries', models.CharField(max_length=100)),
                ('FCM_token', models.TextField(max_length=1000)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('facebook_URL', models.CharField(max_length=100)),
                ('instagram_URL', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_subscribed', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='WishList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='WishlistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.products')),
                ('wishlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.wishlist')),
            ],
        ),
        migrations.AddField(
            model_name='wishlist',
            name='items',
            field=models.ManyToManyField(through='ecommerce_app.WishlistItem', to='ecommerce_app.Products'),
        ),
        migrations.AddField(
            model_name='wishlist',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.PositiveSmallIntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Others')])),
                ('mobile', models.BigIntegerField(unique=True, validators=[django.core.validators.MaxValueValidator(9999999999), django.core.validators.MinValueValidator(1000000000)])),
                ('display_pic', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('description', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.categories')),
            ],
        ),
        migrations.CreateModel(
            name='ShippingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(max_length=500)),
                ('name', models.CharField(max_length=100)),
                ('mobile', models.BigIntegerField(unique=True, validators=[django.core.validators.MaxValueValidator(9999999999), django.core.validators.MinValueValidator(1000000000)])),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RazorpayPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.FloatField()),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('provider_order_id', models.CharField(max_length=40, verbose_name='Order ID')),
                ('payment_id', models.CharField(max_length=36, verbose_name='Payment ID')),
                ('signature_id', models.CharField(max_length=128, verbose_name='Signature ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.order')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='products',
            name='subcategories_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.subcategories'),
        ),
        migrations.AddField(
            model_name='products',
            name='variant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.productvariant'),
        ),
        migrations.CreateModel(
            name='ProductReviews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_image1', models.FileField(null=True, upload_to='')),
                ('review_image2', models.FileField(null=True, upload_to='')),
                ('review_image3', models.FileField(null=True, upload_to='')),
                ('review_image4', models.FileField(null=True, upload_to='')),
                ('review_image5', models.FileField(null=True, upload_to='')),
                ('rating', models.FloatField(validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(5)])),
                ('review', models.TextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.products')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductQuestions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=200, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.products')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answers', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.products')),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.productquestions')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('items_price', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.products')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='items',
            field=models.ManyToManyField(through='ecommerce_app.OrderItems', to='ecommerce_app.Products'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('items_price', models.FloatField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce_app.products')),
            ],
        ),
        migrations.AddField(
            model_name='cart',
            name='items',
            field=models.ManyToManyField(through='ecommerce_app.CartItem', to='ecommerce_app.Products'),
        ),
        migrations.AddField(
            model_name='cart',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
